---
import { JSDOM } from "jsdom";
import type { MarkdownLayoutProps } from "astro";

type Props = MarkdownLayoutProps<{
  title: string;
  author: string;
  date: string;
}>;

const { frontmatter } = Astro.props;
const contentHtml = await Astro.slots.render("default");
const dom = new JSDOM(contentHtml);
const document = dom.window.document;

// Получаем все абзацы
const paragraphs = [...document.querySelectorAll("p")].map(
  (p) => p.textContent || ""
);
---

<html>
  <head>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&family=Lora:ital,wght@0,400..700;1,400..700&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "EB Garamond", serif;
      }
    </style>
    <title>{frontmatter.title}</title>
    <meta charset="utf-8" />
  </head>
  <body>
    <body class="bg-[#F0EEEC] flex justify-center items-center h-screen overflow-hidden">
      <!-- <div id="content-container" class="w-full h-[60vh] flex justify-center items-center"> -->
        <div id="content-container" class="relative bg-[#F2F2F2] rounded-[3vw] shadow-md w-[90vw] h-[90vh] max-w-[800px]">
          <div id="content" class="border-4 border-amber-500"></div>
          <div id="lb-button" class="bg-[#E2E2E2] rounded-bl-[3vw] rounded-tr-[3vw] w-[90px] h-[90px] absolute bottom-0 left-0 flex justify-center items-center">
            <p>2</p>
          </div>
          <div id="rb-button" class="bg-[#E2E2E2] rounded-br-[3vw] rounded-tl-[3vw] w-[90px] h-[90px] absolute bottom-0 right-0 flex justify-center items-center">
            <p>4</p>
          </div>
        </div>
      <!-- </div> -->
    </body>
    <!-- <div>
      <h1>{frontmatter.title}</h1>
      <h2>Автор: {frontmatter.author}</h2>
      <div class="flex justify-end">
        <div onclick="prevPage()" class="w-full h-screen border-4 border-indigo-500">01</div>
        <div id="book-content" class="w-full max-w-9/10 h-screen border-4 border-purple-500">02</div>
        <div onclick="nextPage()" class="w-full h-screen border-4 border-sky-500">03</div>
      </div>
    </div> -->
  </body>
  <script is:inline define:vars={{ paragraphs }}>
    // Количество строк на странице
    const ROWS_PER_PAGE = 10;

    // Рассчитываем количество строк для абзацев
    const measureParagraphs = (paragraphs) => {
      const tempContainer = document.createElement("div");
      tempContainer.style.position = "absolute";
      tempContainer.style.visibility = "hidden";
      tempContainer.style.width = "100%";
      tempContainer.style.lineHeight = "1.5"; // Установите вашу линию высоты
      document.body.appendChild(tempContainer);

      const paragraphHeights = paragraphs.map((text) => {
        const p = document.createElement("p");
        p.textContent = text;
        tempContainer.appendChild(p);
        const lines = Math.ceil(
          p.offsetHeight / parseFloat(getComputedStyle(p).lineHeight)
        );
        tempContainer.innerHTML = ""; // Очищаем контейнер
        return lines;
      });

      document.body.removeChild(tempContainer);
      return paragraphHeights;
    };

    const paragraphHeights = measureParagraphs(paragraphs);

    // Разделяем текст на страницы по строкам
    const pages = [];
    let currentPage = [];
    let currentLines = 0;

    for (let i = 0; i < paragraphs.length; i++) {
      if (currentLines + paragraphHeights[i] <= ROWS_PER_PAGE) {
        currentPage.push(paragraphs[i]);
        currentLines += paragraphHeights[i];
      } else {
        pages.push(currentPage);
        currentPage = [paragraphs[i]];
        currentLines = paragraphHeights[i];
      }
    }

    if (currentPage.length > 0) {
      pages.push(currentPage);
    }

    let currentPageIndex = 0;

    function updatePage() {
      const content = document.getElementById("book-content");
      content.innerHTML = pages[currentPageIndex]
        .map((paragraph) => `<p>${paragraph}</p>`)
        .join("");

      // Обновляем номер текущей страницы
      document.getElementById("current-page").textContent =
        currentPageIndex + 1;

      // Обновляем общее количество страниц
      document.getElementById("total-pages").textContent = pages.length;
    }

    // Определяем функции в глобальной области видимости
    window.nextPage = function () {
      if (currentPageIndex < pages.length - 1) {
        currentPageIndex++;
        updatePage();
      }
    };

    window.prevPage = function () {
      if (currentPageIndex > 0) {
        currentPageIndex--;
        updatePage();
      }
    };

    document.addEventListener("DOMContentLoaded", updatePage);
  </script>
</html>
